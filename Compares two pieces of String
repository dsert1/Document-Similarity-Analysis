def load_file(filename):
    """
    Args:
        filename: string, name of file to read
    Returns:
        string, contains file contents
    """
    #print("Loading file %s" % filename)
    inFile = open(filename, 'r')
    line = inFile.read().strip()
    for char in string.punctuation:
        line = line.replace(char, "")
    inFile.close()
    return line.lower()

### Problem 0: Prep Data ###
def prep_data(input_text):
    """
    Args:
        input_text: string representation of text from file,
                    assume the string is made of lowercase characters
    Returns:
        list representation of input_text
    """
    return(input_text.split())

### Problem 1: Find Bigrams ###
def find_bigrams(single_words):
    """
    Args:
        single_words: list of words in the text, in the order they appear in the text
            all words are made of lowercase characters
    Returns:
        list of bigrams from input text list
        :type single_words: object
    """
    list = []
    #creates pairs of words (bigrams) in list of single words
    for x in range(len(single_words)-1):
        list.append(single_words[x] + " " + single_words[x + 1])
    return list

### Problem 2: Word Frequency ###
def get_frequencies(words):
    """
    Args:
        words: list of words (or bigrams), all are made of lowercase characters
    Returns:
        dictionary that maps string:int where each string 
        is a word (or bigram) in words and the corresponding int 
        is the frequency of the word (or bigram) in words
    """
    dict = {}
    #iterates through words in given word list
    for w in words:
        if w in dict:
            dict[w]+=1
        else:
            dict[w]=1
    return dict

### Problem 3: Similarity ###
def calculate_similarity_score(dict1, dict2):
    """
    The keys of dict1 and dict2 are all lowercase,
    you will NOT need to worry about case sensitivity.
    
    Args:
        dict1: frequency dictionary of words or bigrams for one text
        dict2: frequency dictionary of words or bigrams for another text
    Returns:
        float, a number between 0 and 1, inclusive 
        representing how similar the texts are to each other
        
        The difference in text frequencies = DIFF sums words 
        from these three scenarios: 
        * If a word or bigram occurs in dict1 and dict2 then 
          get the difference in frequencies
        * If a word or bigram occurs only in dict1 then take the 
          frequency from dict1
        * If a word or bigram occurs only in dict2 then take the 
          frequency from dict2
         The total frequencies = ALL is calculated by summing 
         all frequencies in both dict1 and dict2. 
        Return 1-(DIFF/ALL) rounded to 2 decimal places
    """
    DIFF = 0
    ALL = 0
    #calculates ALL frequencies (sum of dict1 and dict2)
    for x in dict1:
        ALL += dict1.get(x)
        if x in dict2:
            DIFF += abs((dict1.get(x)-dict2.get(x)))
        else:
            DIFF += dict1.get(x)
    for y in dict2:
        ALL += dict2.get(y)
        if y not in dict1:
            DIFF += dict2.get(y)
    if ALL != 0:
        return round(1 - (DIFF/ALL), 2)
    else:
        return 0.0

   

### Problem 4: Most Frequent Word(s) ###
def get_most_frequent_words(dict1, dict2):
    """
    The keys of dict1 and dict2 are all lowercase,
    you will NOT need to worry about case sensitivity.
    
    Args:
        dict1: frequency dictionary for one text
        dict2: frequency dictionary for another text
    Returns:
        list of the most frequent word(s) in the input dictionaries
    
    The most frequent word:
        * is based on the combined word frequencies across both dictionaries.
          If a word occurs in both dictionaries, consider the sum the
          freqencies as the combined word frequency. 
        * need not be in both dictionaries, i.e it can be exclusively in
          dict1, dict2, or shared by dict1 and dict2. 
    If multiple words are tied (i.e. share the same highest frequency),
    return an alphabetically ordered list of all these words.
    """
    dict3 = {}
    l = []

    #goes through each word in dict1 and sees if it is in dict2
    for w in dict1:
        if w in dict2:
            dict3[w] = dict1[w] + dict2[w]
        else:
            dict3[w] = dict1[w]


    for w in dict2:
        if w not in dict1:
            dict3[w] = dict2[w]

    max_dict = 0
    max_dict = max(dict3.values())

    #finds the key that corresponds to the highest value
    for w in dict3:
        if dict3[w] == max_dict:
            l.append(w)
    return l


   
